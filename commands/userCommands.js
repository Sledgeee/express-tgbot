const { bot } = require("../lib/bot");
const startMarkup = require("../markups/startMarkup");
const BotController = require("../controllers/botController");

const { BOT_TAG } = process.env;
const commands = {
  start: {
    command: "/start" + BOT_TAG,
    help: "/start - –†–æ–∑–ø–æ—á–∞—Ç–∏ –¥—ñ–∞–ª–æ–≥ –∑ –±–æ—Ç–æ–º\n",
  },
  playlist: {
    command: "/playlist" + BOT_TAG,
    help: "/playlist - –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–ª–µ–π–ª—ñ—Å—Ç –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π —Å–µ–º–µ—Å—Ç—Ä\n",
  },
  playlists: {
    command: "/playlists" + BOT_TAG,
    help: "/playlists - –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –ø–ª–µ–π–ª—ñ—Å—Ç–∏\n",
  },
  timetable: {
    command: "/timetable" + BOT_TAG,
    help: "/timetable - –û—Ç—Ä–∏–º–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ –ø–æ—á–∞—Ç–∫—É —Ç–∞ –∫—ñ–Ω—Ü—è –ø–∞—Ä\n",
  },
  week: {
    command: "/week" + BOT_TAG,
    help: "/week - –Ø–∫–∏–π –∑–∞—Ä–∞–∑ —Ç–∏–∂–¥–µ–Ω—å?\n",
  },
  link: {
    command: "/zoom" + BOT_TAG,
    help: "/zoom - –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Zoom\n",
  },
  schedule: {
    command: "/schedule" + BOT_TAG,
    help: "/schedule - –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –ø–∞—Ä –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å\n",
  },
  scheduleToday: {
    command: "/schedule_today" + BOT_TAG,
    help: "/schedule_today - –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –ø–∞—Ä –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–π –¥–µ–Ω—å\n",
  },
  timeToNearestLesson: {
    command: "/nearest" + BOT_TAG,
    help: "/nearest - –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–π–±–ª–∏–∂—á—É –ø–∞—Ä—É —Ç–∞ —á–∞—Å –¥–æ —ó—ó –ø–æ—á–∞—Ç–∫—É\n",
  },
  cock: {
    command: "/cock" + BOT_TAG,
    help: "/cock - üêì\n",
  },
};

bot.on("message", async (msg) => {
  const message = msg.text?.includes(BOT_TAG) ? msg.text : msg.text + BOT_TAG;
  switch (message) {
    case commands.start.command:
      await bot.sendMessage(
        msg.chat.id,
        "–û–±–µ—Ä–∏, —â–æ —Ç–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ:",
        startMarkup
      );
      break;
    case commands.playlist.command:
      await BotController.sendPlaylist(msg.chat.id, "latest");
      break;
    case commands.playlists.command:
      await BotController.sendPlaylist(msg.chat.id, "all");
      break;
    case commands.timetable.command:
      await BotController.sendTimetable(msg.chat.id);
      break;
    case commands.week.command:
      await BotController.sendWeek(msg.chat.id);
      break;
    case commands.link.command:
      await BotController.sendLinkMarkup(msg.chat.id);
      break;
    case commands.schedule.command:
      await BotController.sendFullSchedule(msg.chat.id);
      break;
    case commands.scheduleToday.command:
      await BotController.sendTodaysSchedule(msg.chat.id);
      break;
    case commands.timeToNearestLesson.command:
      await BotController.sendNearest(msg.chat.id);
      break;
    case commands.cock.command:
      await BotController.sendCock(msg.chat.id);
      break;
    case "/help" + BOT_TAG:
      await BotController.sendUserHelp(msg.chat.id, commands);
      break;
  }
});
